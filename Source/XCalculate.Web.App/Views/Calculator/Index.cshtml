@model CalculatorIndexModel

@{
    ViewData["Title"] = @Model.Name;
}

@*@Html.AntiForgeryToken()*@

<h2>@Model.Name - @Model.Id</h2>
<p>@Model.Description</p>
<p>
    <ul>
        @foreach (var tag in Model.Tags)
        {
            <li>@tag</li>
        }
    </ul>
</p>
<div id="calculator-input-group">
    @for (var i = 0; i < Model.Inputs.Length; i++)
    {
        var label = Model.Inputs[i].ValueLabel.Replace(" ", string.Empty);
        if (Model.Inputs[i].IsArray)
        {
            <div id="array-input-group-@label" class="card mb-3">
                <div class="card-body">
                    <div class="card-title">@Model.Inputs[i].ValueLabel</div>
                    <div id="array-input-group-@label-@i" class="input-group mb-3">
                        <input type="text" class="form-control" oninput="onInputValue(this);">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" disabled onclick="onClickInputRemoveButton(this);">-</button>
                        </div>
                    </div>
                    <input type="button" class="btn" value="Add +" onclick="onClickInputAddButton(this);"/>
                </div>
            </div>
        }
        else
        {
            <div id="input-group-@label" class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon3">@label</span>
                </div>
                <input type="text" class="form-control" id="input-@label" oninput="onInputValue(this);">
            </div>
        }
    }
</div>
<p>
    <input type="button" class="btn" value="Calculate" onclick="onClickSubmit();" />
</p>
<div id="calculator-result-group">
    @for(var i = 0; i < Model.Results.Length; i++)
    {
        var label = Model.Results[i].ValueLabel.Replace(" ", string.Empty);
        <div class="input-group mb-3">
            @if (Model.Results[i].ValueLabel != null && Model.Results[i].ValueLabel.Length > 0)
            {
                <div class="input-group-prepend">
                    <span class="input-group-text">@Model.Results[i].ValueLabel</span>
                </div>
            }
            <input type="text" id="calculator-result-@label" class="form-control mr-sm-2" readonly />
            @if (Model.Results[i].UnitLabel != null && Model.Results[i].UnitLabel.Length > 0)
            {
                <div class="input-group-append">
                    <span class="input-group-text">@Model.Results[i].UnitLabel</span>
                </div>
            }
        </div>
    }
</div>

<script type="text/javascript">
    var inputs = {};
    var arrayInputs = {};

    function onClickSubmit() {
        var url = "/Calculator/@Model.Id/Calculate";
        $.ajax({
            url: url,
            type: "POST",
            contentType: "application/json",
            headers: {
                //RequestVerificationToken:
                //    $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            data: JSON.stringify({ inputs: inputs, arrayInputs: arrayInputs })
        })
        .done(function (result) {
            for (var i = 0; i < result.results.length; i++) {
                var label = result.results[i].info.name.replace(/ /g, "");
                $("#calculator-result-" + label).val(result.results[i].value);
            }
        });
    }

    function onInputValue(e) {
        var id = $(e).parent().attr("id");
        var parsedId = parseInputId(id);
        var value = $(e).val();

        if (parsedId.isArray) {
            if (!arrayInputs[parsedId.label]) {
                arrayInputs[parsedId.label] = [];
            }

            if (arrayInputs[parsedId.label][parsedId.index] !== undefined) {
                arrayInputs[parsedId.label][parsedId.index] = value;
            }
            else {
                arrayInputs[parsedId.label].push(value);
            }
        }
        else {
            inputs[parsedId.label] = value;
        }
    }

    function onClickInputAddButton(e) {
        var $valueInputGroup = $(e).siblings("div[id^='array-input-group']:last");
        var $clone = $valueInputGroup.clone(true, true);
        var $input = $clone.find("input");
        var $button = $clone.find("button");
        $clone.attr("id", changeInputIdIndex($clone.attr("id"), function (i) { return i + 1; }));
        $input.val("");
        $button.attr("disabled", false);

        $clone.insertAfter($valueInputGroup);

        var label = parseInputId($valueInputGroup.attr("id")).label;
        if (arrayInputs[label].length == 1) {
            $valueInputGroup.find("button").attr("disabled", false);
        }
    }

    function onClickInputRemoveButton(e) {
        var $appendGroup = $(e).parent();
        var $valueInputGroup = $appendGroup.parent();

        var id = $valueInputGroup.attr("id");
        var parsedId = parseInputId(id);
        arrayInputs[parsedId.label].splice(parsedId.index, 1);

        $siblings = $valueInputGroup.siblings("div[id^='array-input-group']");

        $valueInputGroup.remove();

        for (var i = 0; i < $siblings.length; i++) {
            var newId = changeInputIdIndex($($siblings[i]).attr("id"), function (idx) { return i; });
            $($siblings[i]).attr("id", newId);
        }

        if ($siblings.length == 1) {
            $siblings.find("button").attr("disabled", true);
        }
    }

    function changeInputIdIndex(id, callback) {
        var parsedId = parseInputId(id);
        var newId = "";
        for (var i = 0; i < parsedId.parts.length - 1; i++) {
            newId += parsedId.parts[i] + "-";
        }

        newId += callback ? callback(parsedId.index) : parsedId.index;

        return newId;
    }

    function parseInputId(id) {
        var parts = id.split("-");
        return {
            isArray: parts[0] === "array",
            label: parts[parts.length - 2],
            index: parseInt(parts[parts.length - 1]),
            parts: parts
        };
    }
</script>
